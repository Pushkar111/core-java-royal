‚úç Java StringBuffer Class	‚ó¶  ‚¶ø	‚Ä¢	
--------------------------
‚ñ∫ Java StringBuffer class is used to create mutable (modifiable) String objects. The StringBuffer class in Java is the same as String class except it is mutable i.e. it can be changed.

	================================================================================================================
	üìù Note: Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. 
			 So it is safe and will result in an order.
	================================================================================================================


‚¶ø	Important Constructors of StringBuffer Class
--------------------------------------------------

=================================================================================================================================================
|				Constructor				|				 								Description												|				
=================================================================================================================================================	
|			StringBuffer()				|		It creates an empty String buffer with the initial capacity of 16.								|
|			StringBuffer(String str)	|		It creates a String buffer with the specified string..											|
|			StringBuffer(int capacity)	|		It creates an empty String buffer with the specified capacity as length.						|		
=================================================================================================================================================



‚¶ø	Important methods of StringBuffer class
--------------------------------------------------

===========================================================================================================================================================================================================================================================================================================================================================
|			Modifier and Type			|						Method						|														Description																																															  |	
===========================================================================================================================================================================================================================================================================================================================================================
| public synchronized StringBuffer	    |				append(String s)					|	It is used to append the specified string with this string. The append() method is overloaded like append(char), append(boolean), append(int), append(float), append(double) etc.																		  |	
| public synchronized StringBuffer	    |			insert(int offset, String s)			|	It is used to insert the specified string with this string at the specified position. The insert() method is overloaded like insert(int, char), insert(int, boolean), insert(int, int), insert(int, float), insert(int, double) etc.				      |
| public synchronized StringBuffer	    |replace(int startIndex, int endIndex, String str)	|	It is used to replace the string from specified startIndex and endIndex.                                                                                                                                                                                  |
| public synchronized StringBuffer	    |	delete(int startIndex, int endIndex)			|	It is used to delete the string from specified startIndex and endIndex.                                                                                                                                                                                   |
| public synchronized StringBuffer	    |				reverse()							|	It is used to reverse the string.                                                                                                                                                                                                                         |
| public int						    |				capacity()							|	It is used to return the current capacity.                                                                                                                                                                                                                |
| public void						    |		ensureCapacity(int minimumCapacity)			|	It is used to ensure the capacity at least equal to the given minimum.                                                                                                                                                                                    |
| public char						    |			charAt(int index)						|	It is used to return the character at the specified position.                                                                                                                                                                                             |
| public int						    |				length()							|	It is used to return the length of the string i.e. total number of characters.                                                                                                                                                                            |
| public String						    |		substring(int beginIndex)					|	It is used to return the substring from the specified beginIndex.                                                                                                                                                                                         |
| public String						    |		substring(int beginIndex, int endIndex)		|	It is used to return the substring from the specified beginIndex and endIndex.                                                                                                                                                                            |
===========================================================================================================================================================================================================================================================================================================================================================


Q. What is a mutable String?
_____________________________
‚ñ∫ A String that can be modified or changed is known as mutable String. StringBuffer and StringBuilder classes are used for creating mutable strings.



1) StringBuffer Class append() Method
--------------------------------------
‚ñ∫ The append() method concatenates the given argument with this String.

		StringBufferExample1.java
		
		public class StringBufferExample1
		{  
			public static void main(String args[])
			{  
//  												012345
				StringBuffer sb = new StringBuffer("Hello ");  
				sb.append("Java"); // now original string is changed  
				System.out.println(sb); // prints Hello Java  
			}  
 		}  


2) StringBuffer insert() Method
--------------------------------------
‚ñ∫ The insert() method inserts the given String with this string at the given position.

		StringBufferExample2.java
		
		public class StringBufferExample2
		{  
			public static void main(String args[])
			{  									 // 012345
				StringBuffer sb = new StringBuffer("Hello ");  
				sb.insert(1,"Java"); // now original string is changed  
				System.out.println(sb); // prints HJavaello  
			}  
		}  


3) StringBuffer replace() Method
--------------------------------------
‚ñ∫ The replace() method replaces the given String from the specified beginIndex and endIndex.

		StringBufferExample3.java
		
		public class StringBufferExample3
		{  
			public static void main(String args[])
			{  									 // 01234
				StringBuffer sb = new StringBuffer("Hello");  
				sb.replace(1, 3, "Java");  
				System.out.println(sb); // prints HJavalo  
			}  
		}  
		
4) StringBuffer delete() Method
--------------------------------------
‚ñ∫ The delete() method of the StringBuffer class deletes the String from the specified beginIndex to endIndex.
		
		StringBufferExample4.java
		
		public class StringBufferExample4
		{  
			public static void main(String args[])
			{  									 // 01234  
				StringBuffer sb = new StringBuffer("Hello");  
				sb.delete(1,3);  
				System.out.println(sb);//prints Hlo  
			}  
		}  
		
		
5) StringBuffer reverse() Method
--------------------------------------
‚ñ∫ The reverse() method of the StringBuilder class reverses the current String.

		StringBufferExample5.java
		
		public class StringBufferExample5
		{  
			public static void main(String args[])
			{  
				StringBuffer sb = new StringBuffer("Hello");  
				sb.reverse();  
				System.out.println(sb);//prints olleH  
			}  
		}  		
				
		
6) StringBuffer capacity() Method
--------------------------------------
‚ñ∫ The capacity() method of the StringBuffer class returns the current capacity of the buffer. The default capacity of the buffer is 16. If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.

		StringBufferExample6.java
		
		public class StringBufferExample6
		{  
			public static void main(String args[])
			{  
				StringBuffer sb = new StringBuffer();  
				System.out.println(sb.capacity());//default 16  
				sb.append("Hello");  
				System.out.println(sb.capacity());//now 16  
				sb.append("java is my favourite language");  
				System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2  
			}  
		}  		
		
7) StringBuffer ensureCapacity() method
---------------------------------------
‚ñ∫ The ensureCapacity() method of the StringBuffer class ensures that the given capacity is the minimum to the current capacity. If it is greater than the current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.

		StringBufferExample7.java
		
		class StringBufferExample7
		{  
			public static void main(String args[])
			{  
				StringBuffer sb = new StringBuffer();  
				System.out.println(sb.capacity()); // default 16  
				sb.append("Hello");  
				System.out.println(sb.capacity()); // now 16  
				sb.append("java is my favourite language");  
				System.out.println(sb.capacity()); // now (16*2)+2=34 i.e (oldcapacity*2)+2  
				
				sb.ensureCapacity(10); // now no change  
				System.out.println(sb.capacity()); // now 34  
				sb.ensureCapacity(50); // now (34*2)+2  
				System.out.println(sb.capacity()); // now 70  
			}  
		}  		
		
		
		
		
		
		
		
		
		