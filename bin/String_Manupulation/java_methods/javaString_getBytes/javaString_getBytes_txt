Java String getBytes()
--------------------------
The Java String class getBytes() method does the encoding of string into the sequence of bytes and keeps it in an array of bytes.

Signature
----------
There are three variants of getBytes() method. The signature or syntax of string getBytes() method is given below:
		
		→ 1. public byte[] getBytes()  
		→ 2. public byte[] getBytes(Charset charset)  
		→ 3. public byte[] getBytes(String charsetName)throws UnsupportedEncodingException  
		
		
Parameters
------------
charset / charsetName - The name of a charset the method supports.
		
		
Returns
-------	
Sequence of bytes.


Exception Throws
-----------------	
UnsupportedEncodingException: It is thrown when the mentioned charset is not supported by the method.

Internal implementation
-------------------------
		public byte[] getBytes() 
		{    
			return StringCoding.encode(value, 0, value.length);    
		}    


String class getBytes() Method Example 1
------------------------------------------
The parameterless getBytes() method encodes the string using the default charset of the platform, which is UTF - 8. The following two examples show the same.

		FileName: StringGetBytesExample1.java
		--------
			public class StringGetBytesExample1
			{  
				public static void main(String args[])
				{  
					String s1="ABCDEFG";  
					byte[] barr = s1.getBytes();  
					for(int i = 0;i < barr.length; i++)
					{  
						System.out.println(barr[i]);  
					}  
				}
			}  	
			
			
Java String class getBytes() Method Example 2
----------------------------------------------
The method returns a byte array that again can be passed to the String constructor to get String.

		FileName: StringGetBytesExample2.java
		--------

			public class StringGetBytesExample2 
			{  
			    public static void main(String[] args) 
			    {  
			        String s1 = "ABCDEFG";  
			        byte[] barr = s1.getBytes();  
			        for(int i = 0; i < barr.length; i++)
			        {  
			            System.out.println(barr[i]);  
			        }  
			        // Getting string back   
			        String s2 = new String(barr);  
			        System.out.println(s2);  
			    }  
			}  
			
			
Java String class getBytes() Method Example 3
----------------------------------------------
The following example shows the encoding into a different charset.

		FileName: StringGetBytesExample3.java
		--------

		//Import statement  
		import java.io.UnsupportedEncodingException;
		
		public class StringGetBytesExample3 {
		//main method  
			public static void main(String args[]) {
		//input string  
				String str = "Welcome to JavaTpoint.";
				System.out.println("The input String is : ");
				System.out.println(str + "\n");
		
		//inside try block encoding is   
		//being done using different charsets  
				try {
		//16 - bit UCS Transformation format  
					byte[] byteArr = str.getBytes("UTF-16");
					System.out.println("After converted into UTF-16 the String is : ");
		
					for (int j = 0; j < byteArr.length; j++) {
						System.out.print(byteArr[j]);
					}
		
					System.out.println("\n");
		
		//Big Endian byte order, 16 - bit UCS Transformation format  
					byte[] byteArr1 = str.getBytes("UTF-16BE");
					System.out.println("After converted into UTF-16BE the String is : ");
		
					for (int j = 0; j < byteArr1.length; j++) {
						System.out.print(byteArr1[j]);
					}
		
					System.out.println("\n");
		
		//ISO Latin Alphabet  
					byte[] byteArr2 = str.getBytes("ISO-8859-1");
					System.out.println("After converted into ISO-8859-1 the String is : ");
		
					for (int j = 0; j < byteArr2.length; j++) {
						System.out.print(byteArr2[j]);
					}
		
					System.out.println("\n");
		
		//Little Endian byte order, 16 - bit UCS Transformation format  
					byte[] byteArr3 = str.getBytes("UTF-16LE");
					System.out.println("After converted into UTF-16LE the String is : ");
		
					for (int j = 0; j < byteArr3.length; j++) {
						System.out.print(byteArr3[j]);
					}
		
				} catch (UnsupportedEncodingException g) {
					System.out.println("Unsupported character set" + g);
				}
		
			}
		}
	


			
			
			
			
			